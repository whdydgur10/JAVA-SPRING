<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.green.project.dao.InformationDao">
	<select id="getLevelNum" resultType="int">
		select level from level where userId = #{id}
	</select>
	<select id="getCouponNum" resultType="int">
		select count(*) from coupon where userId = #{id} and purchaseNum is null
	</select>
	<select id="getPurchaseListNum" resultType="int">
		select count(*) from purchase where userId = #{id} and isDel = 'N'
	</select>
	<select id="getVaginalNum" resultType="int">
		select count(*) from project.vaginal where userId = #{id}
	</select>
	<select id="getShoppingBasketNum" resultType="int">
		select count(*) from shoppingBasket where userId = #{id} and isPurchase = 'N'
	</select>
	<select id="getReviewNum" resultType="int">
		select count(*) from review where userId = #{id}
	</select>
	<select id="getMainAddress" resultType="kr.green.project.vo.AddressVo">
		select * from address where userId = #{id} and isMain = 'Y' and isTemp = 'N'
	</select>
	<select id="getSubAddressList" resultType="kr.green.project.vo.AddressVo">
		select * from address where userId = #{id} and isMain = 'N' and isTemp = 'N'
	</select>
	<select id="getaddressList" resultType="kr.green.project.vo.AddressVo">
		select * from address where userId = #{id} and isTemp = 'N'
	</select>
	<insert id="insertAddress">
		insert into address(userId, code, address, detail, isMain, isTemp) values(#{user.id}, #{address.code}, #{address.address}, #{address.detail}, #{address.isMain}, #{address.isTemp})
	</insert>
	<update id="updateIsSub">
		update address set isMain = 'N' where userId = #{id} and isMain = 'Y'
	</update>
	<update id="updateIsMain">
		update address set isMain = 'Y' where num = #{num}
	</update>
	<delete id="deleteAddress">
		delete from address where num = #{num}
	</delete>
	<select id="getLevel" resultType="kr.green.project.dto.LevelPointDto">
		select * from level
					join (select * from point) as point
					where level.level = point.level and level.userId = #{id}
	</select>
	<select id="getPurchasePrice" resultType="String">
		select sum(price) from purchase where userId = #{id}
	</select>
	<select id="getPointList" resultType="kr.green.project.vo.PointVo">
		select * from point
	</select>
	<select id="getUsePoint" resultType="String">
		select sum(usePoint) from purchase where userId = #{id}
	</select>
	<select id="getNeedPrice" resultType="String">
		select needPrice from point
							join (select * from level where userId = #{id}) as level
							where point.level = level.level
	</select>
	<select id="getPurchase" resultType="kr.green.project.vo.PurchaseVo">
		select * from purchase where userId = #{id} and situation = '상품 도착' order by num DESC
	</select>
	<select id="getUsePointPurchase" resultType="kr.green.project.vo.PurchaseVo">
		select * from purchase where userId = #{id} and isConfirm = 'Y' and isPoint = 'Y' order by num DESC
	</select>
	<select id="getCouponList" resultType="kr.green.project.vo.CouponVo">
		select * from coupon where userId = #{id} and purchaseNum is null
	</select>
	<select id="isCouponCode" resultType="kr.green.project.vo.CouponVo">
		select * from coupon where code = #{code} and userId = 'root'
	</select>
	<insert id="insertCoupon">
		insert into coupon(code, discount, userId ,name) values(#{coupon.code}, #{coupon.discount}, #{id}, #{coupon.name})
	</insert>
	<select id="getUseCouponList" resultType="kr.green.project.vo.CouponVo">
		select * from coupon where userId = #{id} and purchaseNum is not null
	</select>
	<select id="isGetCoupon" resultType="kr.green.project.vo.CouponVo">
		select * from coupon where userId = #{id} and code = #{code}
	</select>
	<select id="getPurchaseList" resultType="kr.green.project.vo.PurchaseVo">
		select * from purchase where userId = #{id} and isDel = 'N' order by num DESC
	</select>
	<select id="getVaginalList" resultType="kr.green.project.vo.VaginalVo">
		select * from project.vaginal where userId = #{id} order by num DESC
	</select>
	<select id="getShoppingBasketList" resultType="kr.green.project.vo.ShoppingbasketVo">
		select * from project.shoppingbasket where userId = #{id} and isPurchase = 'N' order by shoppingNum desc
	</select>
	<select id="getShopEnrollProOptionThumbDto" resultType="kr.green.project.dto.ShopEnrollProOptionThumbDto">
		select * from project.productenrollment
				join(select min(thumbnailNum), thumbnailImage from thumbnail where enrollmentNum = ${enrollNum}) as thumb
                join(select size, color from project.option where optionCode = #{optionCode}) as op
                where productenrollment.num = ${enrollNum};
	</select>
	<select id="getCategory" resultType="kr.green.project.vo.CategoryVo">
		select * from category where categoryNum = #{categoryNum}
	</select>
	<select id="getShoppingBasket" resultType="kr.green.project.vo.ShoppingbasketVo">
		select * from project.shoppingbasket where shoppingNum = #{shoppingNum}
	</select>
	<update id="deleteShoppingBasket">
		update project.shoppingbasket set isPurchase = 'Y' where shoppingNum = #{shoppingNum}
	</update>
	<select id="getPurchaseListTonum" resultType="kr.green.project.vo.PurchaselistVo">
		select * from project.purchaselist where purchaseNum = #{purchaseNum}
	</select>
	<select id="getEnrollmentMainTitle" resultType="String">
		select mainTitle from project.productenrollment where num = #{enrollNum}
	</select>
	<select id="getPointPercent" resultType="double">
		select point from level 
				join point
                on level.level = point.level
                where userId = #{id};
	</select>
	<update id="updateCoupon">
		update coupon set purchaseNum = #{coupon.purchaseNum} where num = #{coupon.num}
	</update>
	<select id="getAddressNum" resultType="int">
		select max(num) from address where userId = #{id}
	</select>
	<update id="updateDecUserPoint">
		update user set point = #{user.point} where id = #{user.id}
	</update>
</mapper>
